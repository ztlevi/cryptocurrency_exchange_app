{"version":3,"sources":["../../../backend/dao/firebase.js"],"names":["admin","serviceAccount","require","initializeApp","credential","cert","databaseURL","db","database","INFO_TYPE","name","email","imageURL","setUserInfo","userId","type","info","console","log","Promise","resolve","reject","infoEntry","ref","child","push","key","updates","update","then","catch","e","getUserInfo","once","profile","Error","setTrading","tradingId","tradingData","tradingEntry","fetchTrading","data","verifyIdToken","auth","idToken","uid","decodedToken","error","module","exports"],"mappings":";;AAAA;;IAAYA,K;;;;AAEZ;AACA,IAAIC,iBAAiBC,QAAQ,6BAAR,CAArB;;AAEA;AACAF,MAAMG,aAAN,CAAoB;AAClBC,cAAYJ,MAAMI,UAAN,CAAiBC,IAAjB,CAAsBJ,cAAtB,CADM;AAElBK,eAAa;AAFK,CAApB;;AAKA;AACA,IAAIC,KAAKP,MAAMQ,QAAN,EAAT;;AAEA,IAAMC,YAAY;AAChBC,QAAM,MADU;AAEhBC,SAAO,OAFS;AAGhBC,YAAU;AAHM,CAAlB;;AAMA;AACA;AACA;AACA,IAAMC,cAAc,SAAdA,WAAc,CAACC,MAAD,EAASC,IAAT,EAAeC,IAAf,EAAwB;AAC1C,MAAI,CAACP,UAAUM,IAAf,EAAqB;AACnBE,YAAQC,GAAR,CAAY,qBAAZ;AACA;AACD;;AAED,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,QAAIC,YAAYf,GACbgB,GADa,CACT,WAAWT,MAAX,GAAoB,UADX,EAEbU,KAFa,CAEPf,UAAUM,IAFH,EAGbU,IAHa,GAGNC,GAHV;;AAKA,QAAIC,UAAU,EAAd;AACAA,YAAQ,WAAWb,MAAX,GAAoB,WAApB,GAAkCL,UAAUM,IAApD,IAA4DC,IAA5D;;AAEAT,OACGgB,GADH,CACO,WAAWT,MAAX,GAAoB,UAD3B,EAEGc,MAFH,CAEUD,OAFV,EAGGE,IAHH,CAGQ,YAAM;AACV;AACA;AACAT,cAAQ,CAAR;AACD,KAPH,EAQGU,KARH,CAQS,aAAK;AACVT,aAAOU,CAAP;AACD,KAVH;AAWD,GApBM,CAAP;AAqBD,CA3BD;;AA6BA;AACA,IAAMC,cAAc,SAAdA,WAAc,CAAClB,MAAD,EAASC,IAAT,EAAkB;AACpC,MAAI,CAACN,UAAUM,IAAf,EAAqB;AACnBE,YAAQC,GAAR,CAAY,qBAAZ;AACA;AACD;;AAED,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCd,OACGgB,GADH,CACO,WAAWT,MAAX,GAAoB,UAD3B,EAEGmB,IAFH,CAEQ,OAFR,EAGGJ,IAHH,CAGQ,mBAAW;AACf,UAAI,CAACK,OAAL,EAAcb,OAAO,IAAIc,KAAJ,0BAAP;AACdf,cAAQc,OAAR;AACD,KANH,EAOGJ,KAPH,CAOS,aAAK;AACVT,aAAOU,CAAP;AACD,KATH;AAUD,GAXM,CAAP;AAYD,CAlBD;;AAoBA;AACA;AACA,IAAMK,aAAa,SAAbA,UAAa,CAACtB,MAAD,EAASuB,SAAT,EAAoBC,WAApB,EAAoC;AACrDrB,UAAQC,GAAR,CAAY,iCAAZ;;AAEA,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,QAAIkB,eAAehC,GAChBgB,GADgB,CACZ,WAAWT,MAAX,GAAoB,UADR,EAEhBU,KAFgB,CAEVf,UAAUM,IAFA,EAGhBU,IAHgB,GAGTC,GAHV;;AAKA,QAAIC,UAAU,EAAd;AACAA,YAAQ,WAAWb,MAAX,GAAoB,WAApB,GAAkCL,UAAUM,IAApD,IAA4DC,IAA5D;;AAEAT,OACGgB,GADH,CACO,WAAWT,MAAX,GAAoB,UAD3B,EAEGc,MAFH,CAEUD,OAFV,EAGGE,IAHH,CAGQ,YAAM;AACVT,cAAQ,CAAR;AACD,KALH,EAMGU,KANH,CAMS,aAAK;AACVT,aAAOU,CAAP;AACD,KARH;AASD,GAlBM,CAAP;AAmBD,CAtBD;;AAwBA,IAAMS,eAAe,SAAfA,YAAe,SAAU;AAC7B,SAAO,IAAIrB,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCd,OACGgB,GADH,CACO,WAAWT,MAAX,GAAoB,UAD3B,EAEGmB,IAFH,CAEQ,OAFR,EAGGJ,IAHH,CAGQ,gBAAQ;AACZ,UAAI,CAACY,IAAL,EAAWpB,OAAO,IAAIc,KAAJ,CAAU,2BAAV,CAAP;AACXf,cAAQqB,IAAR;AACD,KANH,EAOGX,KAPH,CAOS;AAAA,aAAKT,OAAOU,CAAP,CAAL;AAAA,KAPT;AAQD,GATM,CAAP;AAUD,CAXD;;AAaA,IAAMW,gBAAgB,SAAhBA,aAAgB,UAAW;AAC/B,SAAO,IAAIvB,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCrB,UACG2C,IADH,GAEGD,aAFH,CAEiBE,OAFjB,EAGGf,IAHH,CAGQ,wBAAgB;AACpB,UAAIgB,MAAMC,aAAaD,GAAvB;AACAzB,cAAQyB,GAAR;AACD,KANH,EAOGf,KAPH,CAOS,iBAAS;AACdT,aAAO0B,KAAP;AACD,KATH;AAUD,GAXM,CAAP;AAYD,CAbD;;AAeAC,OAAOC,OAAP,GAAiB;AACfpC,0BADe;AAEfmB,0BAFe;AAGfI,wBAHe;AAIfI,4BAJe;AAKfE;AALe,CAAjB","file":"firebase.js","sourcesContent":["import * as admin from 'firebase-admin';\n\n// Fetch the service account key JSON file contents\nlet serviceAccount = require('../res/service_account.json');\n\n// Initialize the app with a service account, granting admin privileges\nadmin.initializeApp({\n  credential: admin.credential.cert(serviceAccount),\n  databaseURL: 'https://crypto-exchange-simulator.firebaseio.com/',\n});\n\n// As an admin, the app has access to read and write all data, regardless of Security Rules\nlet db = admin.database();\n\nconst INFO_TYPE = {\n  name: 'name',\n  email: 'email',\n  imageURL: 'imageURL',\n};\n\n// set user's name, email, imageURL\n// firebase update node's children data\n// https://firebase.google.com/docs/database/web/read-and-write?authuser=0#updating_or_deleting_data\nconst setUserInfo = (userId, type, info) => {\n  if (!INFO_TYPE.type) {\n    console.log('No such type found!');\n    return;\n  }\n\n  return new Promise((resolve, reject) => {\n    let infoEntry = db\n      .ref('users/' + userId + '/profile')\n      .child(INFO_TYPE.type)\n      .push().key;\n\n    let updates = {};\n    updates['users/' + userId + '/profile/' + INFO_TYPE.type] = info;\n\n    db\n      .ref('users/' + userId + '/profile')\n      .update(updates)\n      .then(() => {\n        // set returns non-null firebase.Promise containing void\n        // https://firebase.google.com/docs/reference/js/firebase.database.Reference?authuser=0#set\n        resolve(1);\n      })\n      .catch(e => {\n        reject(e);\n      });\n  });\n};\n\n// get user's profile\nconst getUserInfo = (userId, type) => {\n  if (!INFO_TYPE.type) {\n    console.log('No such type found!');\n    return;\n  }\n\n  return new Promise((resolve, reject) => {\n    db\n      .ref('users/' + userId + '/profile')\n      .once('value')\n      .then(profile => {\n        if (!profile) reject(new Error(`No user profile found!`));\n        resolve(profile);\n      })\n      .catch(e => {\n        reject(e);\n      });\n  });\n};\n\n// handle trading request\n// append a new trading to the existing trading history\nconst setTrading = (userId, tradingId, tradingData) => {\n  console.log('Push new trading to firebase...');\n\n  return new Promise((resolve, reject) => {\n    let tradingEntry = db\n      .ref('users/' + userId + '/trading')\n      .child(INFO_TYPE.type)\n      .push().key;\n\n    let updates = {};\n    updates['users/' + userId + '/profile/' + INFO_TYPE.type] = info;\n\n    db\n      .ref('users/' + userId + '/profile')\n      .update(updates)\n      .then(() => {\n        resolve(1);\n      })\n      .catch(e => {\n        reject(e);\n      });\n  });\n};\n\nconst fetchTrading = userId => {\n  return new Promise((resolve, reject) => {\n    db\n      .ref('users/' + userId + '/trading')\n      .once('value')\n      .then(data => {\n        if (!data) reject(new Error('No trading history found!'));\n        resolve(data);\n      })\n      .catch(e => reject(e));\n  });\n};\n\nconst verifyIdToken = idToken => {\n  return new Promise((resolve, reject) => {\n    admin\n      .auth()\n      .verifyIdToken(idToken)\n      .then(decodedToken => {\n        var uid = decodedToken.uid;\n        resolve(uid);\n      })\n      .catch(error => {\n        reject(error);\n      });\n  });\n};\n\nmodule.exports = {\n  setUserInfo,\n  getUserInfo,\n  setTrading,\n  fetchTrading,\n  verifyIdToken,\n};\n"]}
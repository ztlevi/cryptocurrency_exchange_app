#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('backend:server');
var http = require('http');

import { cachedCryptoPrice, updateCurrencyPrice } from '../dao/api';
import { resolveSuspendedList } from '../utils/suspendedList';
import { uploadLeaderBoard, fetchSuspendedList } from '../dao/firebase';
import { genLeaderBoard } from '../utils/asset';
import { firstUpdateSuspendedList } from '../utils/suspendedList';
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '4000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

// fetchSuspendedList ath the begininit
firstUpdateSuspendedList();

// update local caching price every minite
updateCurrencyPrice();
setInterval(() => {
  updateCurrencyPrice();
}, 5000);

// resolve suspendedList, see if we can proceed some request or delete the expire request

setInterval(() => {
  resolveSuspendedList();
}, 30000);

// generate the leaader board
setInterval(() => {
  genLeaderBoard().then(res => {
    if (!res) {
      console.log('Cannot generate the leader board!!!');
      return;
    }
    res.sort((a, b) => {
      let va = a.assets.USD ? a.assets.USD : 0;
      let vb = b.assets.USD ? b.assets.USD : 0;
      return vb - va;
    });
    uploadLeaderBoard(res)
      .then(res => {
        if (!res) {
          console.log('Upload leaderboard to firebase failed!!!');
          return;
        }
      })
      .catch(e => {
        reject(e);
      });
  });
}, 30000);
